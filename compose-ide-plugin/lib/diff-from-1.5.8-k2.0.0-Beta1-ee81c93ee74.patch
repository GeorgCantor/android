diff --git a/buildSrc/repos.gradle b/buildSrc/repos.gradle
index 297a5206249..872840958b7 100644
--- a/buildSrc/repos.gradle
+++ b/buildSrc/repos.gradle
@@ -63,6 +63,9 @@ def addMavenRepositories(RepositoryHandler handler) {
             }
         }
     }
+    handler.maven {
+        url("https://plugins.gradle.org/m2/")
+    }
     if (System.getenv("ALLOW_PUBLIC_REPOS") != null || System.getProperty("ALLOW_PUBLIC_REPOS") != null) {
         handler.mavenCentral()
         handler.google()
diff --git a/busytown/impl/prepare-linux-sysroot.sh b/busytown/impl/prepare-linux-sysroot.sh
index a89d199abe2..9d46a0c48d0 100755
--- a/busytown/impl/prepare-linux-sysroot.sh
+++ b/busytown/impl/prepare-linux-sysroot.sh
@@ -8,6 +8,10 @@ SYSROOT_DIR=$1
 mkdir -p $SYSROOT_DIR
 # TODO Can we find a more reliable way to get the kotlin native version?
 KOTLIN_NATIVE_VERSION=$(grep "kotlinNative =" gradle/libs.versions.toml| cut -d "=" -f2|tr -d '"'|cut -d " " -f2)
+
+PREBUILTS_PROPERTIES="$(cat $SCRIPT_DIR/../../../../prebuilts/androidx/konan/linux-prebuilts.properties)"
+echo "$KOTLIN_NATIVE_VERSION=${PREBUILTS_PROPERTIES#*=}" >> $SCRIPT_DIR/../../../../prebuilts/androidx/konan/linux-prebuilts.properties
+
 # extract it into the out dir
 $SCRIPT_DIR/../../../../prebuilts/androidx/konan/copy-linux-sysroot.sh \
     --kotlin-version $KOTLIN_NATIVE_VERSION \
diff --git a/compose/compiler/compiler-hosted/src/main/java/androidx/compose/compiler/plugins/kotlin/ComposePlugin.kt b/compose/compiler/compiler-hosted/src/main/java/androidx/compose/compiler/plugins/kotlin/ComposePlugin.kt
index 9911b1ba626..83f3577e4fc 100644
--- a/compose/compiler/compiler-hosted/src/main/java/androidx/compose/compiler/plugins/kotlin/ComposePlugin.kt
+++ b/compose/compiler/compiler-hosted/src/main/java/androidx/compose/compiler/plugins/kotlin/ComposePlugin.kt
@@ -243,6 +243,28 @@ class ComposeCommandLineProcessor : CommandLineProcessor {
     }
 }
 
+@OptIn(ExperimentalCompilerApi::class)
+class ComposePluginRegistrarForK2 : org.jetbrains.kotlin.compiler.plugin.CompilerPluginRegistrar() {
+    override val supportsK2: Boolean
+        get() = true
+
+    override fun ExtensionStorage.registerExtensions(configuration: CompilerConfiguration) {
+        // Workaround only for K2 plugin registrar
+        if (!configuration.languageVersionSettings.languageVersion.usesK2) return
+
+        // Avoid the conflict with [ComposePluginRegistrar].
+        if (ComposePluginRegistrar.usedOldRegistrar) return
+
+        if (ComposePluginRegistrar.checkCompilerVersion(configuration)) {
+            DescriptorSerializerPlugin.registerExtension(ClassStabilityFieldSerializationPlugin())
+            FirExtensionRegistrarAdapter.registerExtension(ComposeFirExtensionRegistrar())
+            IrGenerationExtension.registerExtension(
+                ComposePluginRegistrar.createComposeIrExtension(configuration)
+            )
+        }
+    }
+}
+
 @Suppress("DEPRECATION") // CompilerPluginRegistrar does not expose project (or disposable) causing
                          // memory leaks, see: https://youtrack.jetbrains.com/issue/KT-60952
 @OptIn(ExperimentalCompilerApi::class)
@@ -254,6 +276,9 @@ class ComposePluginRegistrar : org.jetbrains.kotlin.compiler.plugin.ComponentReg
         project: MockProject,
         configuration: CompilerConfiguration
     ) {
+        // Avoid the conflict with [ComposePluginRegistrarForK2].
+        usedOldRegistrar = true
+
         if (checkCompilerVersion(configuration)) {
             registerCommonExtensions(project)
             IrGenerationExtension.registerExtension(
@@ -264,9 +289,11 @@ class ComposePluginRegistrar : org.jetbrains.kotlin.compiler.plugin.ComponentReg
     }
 
     companion object {
+        internal var usedOldRegistrar = false
+
         fun checkCompilerVersion(configuration: CompilerConfiguration): Boolean {
             try {
-                val KOTLIN_VERSION_EXPECTATION = "1.9.22"
+                val KOTLIN_VERSION_EXPECTATION = "2.0.0-Beta1"
                 KotlinCompilerVersion.getVersion()?.let { version ->
                     val msgCollector = configuration.get(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY)
                     val suppressKotlinVersionCheck = configuration.get(
diff --git a/compose/compiler/compiler-hosted/src/main/resources/META-INF/services/org.jetbrains.kotlin.compiler.plugin.CompilerPluginRegistrar b/compose/compiler/compiler-hosted/src/main/resources/META-INF/services/org.jetbrains.kotlin.compiler.plugin.CompilerPluginRegistrar
new file mode 100644
index 00000000000..46e96658b7c
--- /dev/null
+++ b/compose/compiler/compiler-hosted/src/main/resources/META-INF/services/org.jetbrains.kotlin.compiler.plugin.CompilerPluginRegistrar
@@ -0,0 +1 @@
+androidx.compose.compiler.plugins.kotlin.ComposePluginRegistrarForK2
\ No newline at end of file
diff --git a/datastore/datastore-compose-samples/build.gradle b/datastore/datastore-compose-samples/build.gradle
index 698b179ccdb..a00b9fdf1a8 100644
--- a/datastore/datastore-compose-samples/build.gradle
+++ b/datastore/datastore-compose-samples/build.gradle
@@ -32,6 +32,12 @@ plugins {
     alias(libs.plugins.kotlinSerialization)
 }
 
+repositories {
+    maven {
+        url("https://androidx.dev/storage/compose-compiler/repository/")
+    }
+}
+
 dependencies {
     implementation(libs.protobufLite)
     implementation(libs.kotlinStdlib)
@@ -57,6 +63,9 @@ android {
     defaultConfig {
         minSdk 28
     }
+    composeOptions {
+        kotlinCompilerExtensionVersion "1.5.6-dev-k2.0.0-Beta1-06a03be2b42"
+    }
 }
 
 protobuf {
