/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
  psiImplUtilClass="com.android.tools.idea.gradle.something.parser.PsiImplUtil"
  psiPackage="com.android.tools.idea.gradle.something.psi"
  psiImplPackage="com.android.tools.idea.gradle.something.psi.impl"
  parserClass="com.android.tools.idea.gradle.something.parser.SomethingParser"
  parserUtilClass="com.android.tools.idea.gradle.something.parser.SomethingParserUtil"

  elementTypeHolderClass="com.android.tools.idea.gradle.something.parser.SomethingElementTypeHolder"
  tokenTypeClass="com.android.tools.idea.gradle.something.parser.SomethingTokenType"
  elementTypeClass="com.android.tools.idea.gradle.something.psi.SomethingElementType"
  psiClassPrefix="Something"
  psiImplClassSuffix="Impl"

  classHeader='generatedFilesHeader.txt'

  tokens = [
    OP_EQ = "="
    OP_DOT = "."
    OP_LBRACE = "{"
    OP_RBRACE = "}"
    OP_LPAREN = "("
    OP_RPAREN = ")"

    line_comment = "regexp://.*"
    number = "regexp:\d+"
    string = "regexp:\"[^\"]*\""
    boolean = "regexp:(true|false)"
    null = "null"
    token = "regexp:[a-z][a-zA-Z0-9]*"
  ]
}

entries ::= entry*
entry ::= !<<eof>> !(OP_RBRACE|OP_RPAREN) (assignment | block | factory) {pin=1 recoverWhile=entry_recover}
private entry_recover ::= !(token|OP_RBRACE|OP_RPAREN)
assignment ::= lvalue OP_EQ rvalue {pin=2}
lvalue ::= identifier
identifier ::= token
rvalue ::= factory | property | string | number | boolean
property ::= qualified | bare {methods=[getField getReceiver]}
qualified ::= property OP_DOT identifier {extends=property pin=2}
bare ::= identifier {extends=property}
block ::= (identifier | factory) OP_LBRACE block_entry* OP_RBRACE {pin=2}
private block_entry ::= !'}' entry
factory ::= identifier OP_LPAREN (factory | rvalue) OP_RPAREN {pin=2}

