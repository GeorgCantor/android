/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.run.deployment.liveedit.analysis

import com.android.tools.idea.run.deployment.liveedit.analysis.leir.IrInstruction
import com.android.tools.idea.run.deployment.liveedit.analysis.leir.IrInstructionList
import org.objectweb.asm.Opcodes

private const val kComposerClass = "androidx/compose/runtime/ComposerKt"

// sourceInformation() is a Compose debugging method that allows for integration with tooling, such as the inspector. It accepts a single
// String parameter that contains information about the source location of calls to @Composable functions; this causes the String to change
// frequently as modifications are made to the file, which is why we ignore it.
//
// See: https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#sourceInformation(androidx.compose.runtime.Composer,kotlin.String)
private const val kSourceInfo = "sourceInformation"

// sourceInformationMarkerStart() is a similar method to sourceInformation(), but accepts an additional integer key parameter generated by
// the compiler based on the source location of the call.
//
// See: https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#sourceInformation(androidx.compose.runtime.Composer,kotlin.String)
private const val kSourceInfoMarker = "sourceInformationMarkerStart"

internal fun onlyHasSourceInfoChanges(old: IrInstructionList, new: IrInstructionList): Boolean {
  var oldInsn = old.first
  var newInsn = new.first
  while (oldInsn != null || newInsn != null) {
    if (oldInsn != newInsn && oldInsn != null && newInsn != null) {
      val isSourceInfoString = isSourceInfoString(oldInsn) && isSourceInfoString(newInsn)
      val isSourceInfoMarkerKey = isSourceInfoMarkerKey(oldInsn) && isSourceInfoMarkerKey(newInsn)
      val isSourceInfoMarkerString = isSourceInfoMarkerString(oldInsn) && isSourceInfoMarkerString(newInsn)
      if (!isSourceInfoString && !isSourceInfoMarkerKey && !isSourceInfoMarkerString) {
        return false
      }
    }
    oldInsn = oldInsn?.next
    newInsn = newInsn?.next
  }
  return true
}

private fun isSourceInfoString(insn: IrInstruction): Boolean {
  if (insn.type != IrInstruction.Type.INSTRUCTION || insn.opcode != Opcodes.LDC || insn.params[0] !is String) return false

  val sourceInfo = insn.nextInsn ?: return false
  return sourceInfo.opcode == Opcodes.INVOKESTATIC &&
         sourceInfo.params[0] as? String == kComposerClass &&
         sourceInfo.params[1] as? String == kSourceInfo
}

private fun isSourceInfoMarkerKey(insn: IrInstruction): Boolean {
  if (insn.type != IrInstruction.Type.INSTRUCTION || insn.opcode != Opcodes.LDC || insn.params[0] !is Int) return false

  val stringArg = insn.nextInsn ?: return false
  if (stringArg.type != IrInstruction.Type.INSTRUCTION || stringArg.opcode != Opcodes.LDC || stringArg.params[0] !is String) return false

  val sourceInfo = stringArg.nextInsn ?: return false
  return sourceInfo.opcode == Opcodes.INVOKESTATIC &&
         sourceInfo.params[0] as? String == kComposerClass &&
         sourceInfo.params[1] as? String == kSourceInfoMarker
}

private fun isSourceInfoMarkerString(insn: IrInstruction): Boolean {
  if (insn.type != IrInstruction.Type.INSTRUCTION || insn.opcode != Opcodes.LDC || insn.params[0] !is String) return false

  val sourceInfo = insn.nextInsn ?: return false
  return sourceInfo.opcode == Opcodes.INVOKESTATIC &&
         sourceInfo.params[0] as? String == kComposerClass &&
         sourceInfo.params[1] as? String == kSourceInfoMarker
}